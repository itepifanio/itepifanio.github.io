<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="pt"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://itepifanio.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://itepifanio.github.io/" rel="alternate" type="text/html" hreflang="pt" /><updated>2023-10-11T19:32:29+00:00</updated><id>https://itepifanio.github.io/feed.xml</id><title type="html">Bloguito</title><subtitle>Web dev &amp; more.</subtitle><entry><title type="html">Revisitando a Python Nordeste 2023</title><link href="https://itepifanio.github.io//pt/2023/09/26/pyne-2023.html" rel="alternate" type="text/html" title="Revisitando a Python Nordeste 2023" /><published>2023-09-26T22:03:00+00:00</published><updated>2023-09-26T22:03:00+00:00</updated><id>https://itepifanio.github.io//pt/2023/09/26/pyne-2023</id><content type="html" xml:base="https://itepifanio.github.io//pt/2023/09/26/pyne-2023.html">&lt;p&gt;A &lt;a href=&quot;https://2023.pythonnordeste.org/&quot;&gt;edição 2023 da Python Nordeste&lt;/a&gt; aconteceu na UFBA de Salvador nos dias 22 a 24 de setembro. Três dias coloridos com as fitinhas do Bonfim, imersos em Python &amp;amp; comunidade e finalizados com poesia a galope.&lt;/p&gt;

&lt;h2 id=&quot;sexta-feira&quot;&gt;Sexta-feira&lt;/h2&gt;

&lt;p&gt;Iniciando a tarde, além do credenciamento tivemos &lt;a href=&quot;https://www.instagram.com/p/Cxd8OCcLvax/&quot;&gt;uma mesa de abertura&lt;/a&gt; “Yabás das Ciências: representações femininas do conhecimento ancestral e científico”, discutindo a representação preta na academia e computação. No fim do dia tivemos a apresentação cultural do grupo &lt;a href=&quot;https://www.instagram.com/maosnocouro/&quot;&gt;Mãos no couro&lt;/a&gt; apresentando um samba como nunca vimos.&lt;/p&gt;

&lt;h2 id=&quot;sábado&quot;&gt;Sábado&lt;/h2&gt;

&lt;p&gt;Sábado foi o dia mais cheio de atividades, com dois keynotes. O Matheus Moreira falou sobre &lt;a href=&quot;https://github.com/moreira-matheus/pyne23/blob/main/Apresentacao_PyNE23.pdf&quot;&gt;dataficação, dataismo &amp;amp; colonialismo digital&lt;/a&gt;, discutindo o rastreio de dados, os limites da privacidade e como isso reforça práticas coloniais como o extrativismo predatório (só que dos dados). Já Anicely Santos apresentou a música “A Natureza das coisas” em uma versão só sua, envolvendo todo o processo de comunidade e finalizando com a citação “Quando alguém te dá um punhado de farinha, ela está te dando um futuro”.&lt;/p&gt;

&lt;h2 id=&quot;domingo&quot;&gt;Domingo&lt;/h2&gt;

&lt;p&gt;Tarcizio Silva apresentou um punhado de suas pesquisas com o keynote sobre racismo algoritmico, mostrando como a Inteligência Artificial tem viés e pode reforçar o racismo estrutural. Para encerrar o evento o nosso Humberto declamou sua tradicional Galope a beira-mar.&lt;/p&gt;

&lt;h2 id=&quot;além-dos-keynotes&quot;&gt;Além dos keynotes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Aprendemos que dendê é tão versátil que dá pra fazer até brigadeiro!&lt;/li&gt;
  &lt;li&gt;Ouvimos da Dandara que &lt;a href=&quot;https://pretalx.com/python-nordeste-2023/talk/8RRMUE/&quot;&gt;análise de dados é coisa de gente fofoqueira&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tivemos &lt;a href=&quot;https://pretalx.com/python-nordeste-2023/talk/KC8PPZ/&quot;&gt;aula de vogue da Alynne&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;E claro que tivemos contribuições de membros do GruPy-RN: a Ryllari &lt;a href=&quot;https://pretalx.com/python-nordeste-2023/talk/7LW8WU/&quot;&gt;organizou a vida de todo mundo com Celery&lt;/a&gt;, o &lt;a href=&quot;https://pretalx.com/python-nordeste-2023/talk/ZRHNW8/&quot;&gt;Ítalo (estranho falar de mim na terceira pessoa) ensinou a publicar pacotes python com Jupyter notebooks&lt;/a&gt;, além da Gabi e Raquel que &lt;a href=&quot;https://pretalx.com/python-nordeste-2023/talk/BCYLG3/&quot;&gt;mostraram o que é feature flags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tiramos uma foto com algumas das pessoas de Natal que foram pro evento (as demais ou correram pra comer na hora do almoço ou viajaram mais cedo no domingo):&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
    ![](/assets/pyne-2023/natal-no-evento.jpeg)

    &lt;figcaption&gt;Da esquerda pra direita: Vinícius Mendes, Ítalo Epifânio, Andressa Lima, Ryllari Costa e Gabriela Cavalcante&lt;/figcaption&gt;
&lt;/div&gt;

&lt;h2 id=&quot;novidades&quot;&gt;Novidades&lt;/h2&gt;

&lt;p&gt;Fico muito feliz em anunciar que Natal vai ser a sede da próxima Python Nordeste! São muitas ideias pra uma edição com a cara da cidade e da nossa comunidade. Já estamos planejando a identidade visual, visitando lugares pro próximo evento e já temos até um cronograma inicial pra organizar tudo.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
    ![](/assets/pyne-2023/anuncio-nova-sede.jpeg)

    &lt;figcaption&gt;Momento após anúncio da nova sede (Anicely havia dado spoilers minutos antes :P). &lt;a href=&quot;https://twitter.com/xima/status/1706025139932966960&quot; target=&quot;_blank&quot;&gt;Foto roubada do Xima&lt;/a&gt;&lt;/figcaption&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">A edição 2023 da Python Nordeste aconteceu na UFBA de Salvador nos dias 22 a 24 de setembro. Três dias coloridos com as fitinhas do Bonfim, imersos em Python &amp;amp; comunidade e finalizados com poesia a galope.</summary></entry><entry><title type="html">PyCon US 2023</title><link href="https://itepifanio.github.io/2023/05/07/pycon-2023.html" rel="alternate" type="text/html" title="PyCon US 2023" /><published>2023-05-07T13:39:20+00:00</published><updated>2023-05-07T13:39:20+00:00</updated><id>https://itepifanio.github.io/2023/05/07/pycon-2023</id><content type="html" xml:base="https://itepifanio.github.io/2023/05/07/pycon-2023.html">&lt;h2 id=&quot;pycon-us-2023&quot;&gt;PyCon US 2023&lt;/h2&gt;

&lt;p&gt;PyCon US é a maior conferência anual da linguagem de programação Python.
O evento aconteceu de 19 a 27 de abril em &lt;a href=&quot;https://goo.gl/maps/2V9ofSHdHciUxRcg7&quot;&gt;Salt Lake City, Utah&lt;/a&gt;.
Fiquei feliz em contribuir com um tutorial, participar de palestras inspiradoras e me atualizar com 
os anúncios da Python Software Foundation (PSF).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pycon-2023/conference_passport.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notícias, como a &lt;a href=&quot;https://blog.pypi.org/posts/2023-04-23-introducing-pypi-organizations/&quot;&gt;funcionalidade de organizações PyPI&lt;/a&gt;,
e retrospectivas como a conduzida por &lt;a href=&quot;https://en.wikipedia.org/wiki/Guido_van_Rossum&quot;&gt;Guido Van Rossum&lt;/a&gt;
foram parte fundamental da conferência.&lt;/p&gt;

&lt;h2 id=&quot;palestras&quot;&gt;Palestras&lt;/h2&gt;

&lt;p&gt;PyCon tem duas trilhas de palestras, uma em inglês e outra em espanhol chamada de “Las Charlas”.
Todas as trilhas estarão disponíveis no YouTube em um futuro próximo. Você poderá encontrá-las &lt;a href=&quot;https://www.youtube.com/c/pyconus&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A palestra mais divertida de que participei foi sobre como &lt;a href=&quot;https://us.pycon.org/2023/schedule/presentation/142/&quot;&gt;Criar jogos interativos usando MicroPython e eletrônicos&lt;/a&gt;.
Ele me apresentou ao novo mundo do MicroPython e como programar jogos usando uma placa
chamado &lt;a href=&quot;https://makecode.microbit.org/&quot;&gt;micro:bit&lt;/a&gt;. A placa micro:bit foi projetada para crianças,
não possui pinos ou conectores que possam machuca-las e já vem com várias funcionalidades pré-programados. 
Confira o vídeo “Chase the dot” de 30 segundos (som ligado) e veja como é divertido programar esses pequenos jogos.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NVJH6F-3XuU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;tutoriais&quot;&gt;Tutoriais&lt;/h2&gt;

&lt;p&gt;Foi gratificante contribuir com o evento ministrando um tutorial sobre tópicos avançados em Jupyter Notebooks.
O tutorial &lt;a href=&quot;https://us.pycon.org/2023/schedule/presentation/2/&quot;&gt;Indo além com Jupyter Notebooks: Escreva seu primeiro pacote usando programação letrada&lt;/a&gt;
foi bem atendido e apresentou o uso de nbdev para escrever pacotes Python usando notebooks Jupyter.
O tutorial também apresentou tópicos avançados como teste, ferramentas de qualidade de código e como criar interfaces para notebooks Jupyter.
Todas as ferramentas apresentadas são usadas no fluxo de trabalho da Palaimon para construir e documentar seus produtos.
A apresentação &lt;a href=&quot;https://github.com/itepifanio/going-beyond-with-jupyter-notebooks/blob/main/presentation/presentation.pdf&quot;&gt;está disponível aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pycon-2023/tutorial_room.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;anúncios&quot;&gt;Anúncios&lt;/h2&gt;

&lt;p&gt;O maior anúncio foi a introdução de contas de organização para o Python Packaging Index (PyPI), que foi um dos
recursos mais pedidos para a plataforma. O PyPI agora será mais fácil de usar com grandes equipes que precisam
gerenciar sub-equipes e vários pacotes. Este recurso será gratuito para projetos da comunidade e estará disponível por uma pequena taxa para projetos corporativos.&lt;/p&gt;

&lt;p&gt;Essa funcionalidade é crucial para a sustentabilidade financeira do PyPI, pois o número de downloads tem crescido (57% no último período) e sua infraestrutura é atualmente subsidiada pela AWS. A Python Software Foundation (PSF) tem trabalhado na sustentabilidade financeira da organização. Eles anunciaram que a PyCon US agora responde por 75% de sua receita anual (anteriormente era em torno de 90%) e relatou uma parceria piloto com um programa educacional que pode servir como um
fonte adicional de receita para a organização.&lt;/p&gt;

&lt;h2 id=&quot;palestras-1&quot;&gt;Palestras&lt;/h2&gt;

&lt;p&gt;A palestra “Python: The People’s Programming Language”, de Carol Willing, realmente se destacou para mim.
Carol mergulhou nos conceitos de computação distribuída e redes para discutir redes comunitárias resilientes.
Foi uma conversa intimista que tocou em desafios pessoais e realizações comunitárias.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pycon-2023/carol_willing_keynote.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Guido Van Rossum, o criador do Python, inicialmente nos pregou uma peça com a conversa
“Feed CPython to ChatGPT: can we use AI to make Python faster?”. Mais tarde ele discutiu
eventos anteriores da PyCon nos EUA, histórias compartilhadas e informações fornecidas sobre o passado e 
o futuro do Python.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pycon-2023/guido_keynote.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;A PyCon é uma conferência diversificada e inclusiva que abraça a comunidade. Os tutoriais,
palestras e palestras são incríveis, mas a melhor parte do evento é se conectar com as pessoas,
compartilhando conhecimento e discutindo tópicos pelos quais você é apaixonado. O maior desafio do
conferência é aproveitar ao máximo seu tempo lá.&lt;/p&gt;</content><author><name></name></author><summary type="html">PyCon US 2023</summary></entry><entry><title type="html">2022 Recap</title><link href="https://itepifanio.github.io/2023/01/01/recap-2022.html" rel="alternate" type="text/html" title="2022 Recap" /><published>2023-01-01T16:09:20+00:00</published><updated>2023-01-01T16:09:20+00:00</updated><id>https://itepifanio.github.io/2023/01/01/recap-2022</id><content type="html" xml:base="https://itepifanio.github.io/2023/01/01/recap-2022.html">&lt;p&gt;2022 foi um ano longo. O mercado de tecnologia começou a esfriar e até as grandes empresas começaram a 
demitir em massa, alguns amigos foram atingidos pelas demissões, mas ainda bem que todos já encontraram 
um novo lugar para trabalhar. A política brasileira batalhou por sua frágil democracia 
(e ainda bem que ganhou, mesmo que por pouco). Eu também aprendi um monte de coisas sobre a área de 
inteligência artificial (IA).&lt;/p&gt;

&lt;p&gt;Em 2021 eu estudei tópicos de IA como anotações de dados e taggeamento. Em 2022 eu ajudei a customizar e 
estender produtos de IA com foco em visão computacional e detecção de objetos. Esse tipo de projeto requer 
um esforço grande no pré e pós processamento dos dados, além de passos adicionais, como o 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Data_Version_Control&quot;&gt;versionamento de dados&lt;/a&gt;, 
para garantir a reproducibilidade dos experimentos.&lt;/p&gt;

&lt;h2 id=&quot;eventos&quot;&gt;Eventos&lt;/h2&gt;

&lt;p&gt;Engajei ainda mais com a comunidade de tecnologia, organizando eventos e palestrando.&lt;/p&gt;

&lt;p&gt;Palestrei:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Na &lt;a href=&quot;https://2022.pythonnordeste.org/&quot;&gt;Python Nordeste 2022&lt;/a&gt; (maior evento Python do Nordeste) 
sobre meu trabalho como desenvolvedor open source da biblioteca 
&lt;a href=&quot;https://github.com/palaimon/ipyannotator&quot;&gt;Ipyannotator&lt;/a&gt; e como ela pode ser utilizada para anotações 
de tráfego terrestre, utilizando o &lt;a href=&quot;https://palaimon.io/projects.html#sec-cc&quot;&gt;projeto CityCount&lt;/a&gt; 
como exemplo&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.instagram.com/p/CgSt2CgLTyQ/&quot;&gt;V PHPRN meetup&lt;/a&gt;, retornando os eventos presenciais. Eu falei 
sobre minha experiência com a &lt;a href=&quot;https://tallstack.dev/&quot;&gt;TALL stack&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Organizei:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.instagram.com/p/CgSt2CgLTyQ/&quot;&gt;V PHPRN meetup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.instagram.com/p/CiVN31LrtaR/&quot;&gt;IX Meetup GrupyRN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.instagram.com/p/CkgPmVBOG4j/&quot;&gt;Python Day 2022&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://phprn.github.io/phpeste/&quot;&gt;PHPeste 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esse foi meu primeiro ano organizando eventos e gerenciando comunidades de tecnologias. Foi mais trabalhoso 
do que pensei inicialmente: falar com a comunidade, fazer artes, atualizar sites e mídias sociais, 
agendar espaços, ir atrás de patrocinadores, pedir comida e gerar certificados. Eu aprendi bastante sobre 
acessibilidade, sempre tem espaço pra melhorar, mas eu acho que estavamos na direção certa na organização 
do Python Day, onde garantimos comida para todos (incluindo veganos, pessoas alérgicas a gluten, leite e 
diabéticos), excluimos os aplausos do evento para incluir pessoas sensiveis a sons, e tivemos uma escuta 
ativa e esforço para criar um espaço que inclua todos os gêneros, raças e sexualidade.&lt;/p&gt;

&lt;h2 id=&quot;explorações&quot;&gt;Explorações&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Aprendi sobre &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_graphics&quot;&gt;computação gráfica&lt;/a&gt; 
desenvolvendo um simples raytracer em C++ que lê um arquivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xml&lt;/code&gt; e retorna uma imagem &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ppm&lt;/code&gt; com 
uma cena 3D. Foi um dos projetos mais desafiadores que já fiz principalmente porque tenho 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Aphantasia&quot;&gt;aphantasia&lt;/a&gt;, não conseguir projetar imagens mentais 
atrapalhou na hora de debugar as projeções de câmera e abstrair calculos dos ângulos.&lt;/li&gt;
  &lt;li&gt;Estudei sobre métricas de qualidade de software com foco em orientação objeto. Utilizei a versão Java 
da biblioteca &lt;a href=&quot;https://tinylog.org/v2/&quot;&gt;Tinylog&lt;/a&gt; para analisar métricas como 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;complexidade ciclomática&lt;/a&gt;, 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fan-out_(software)#Software_design_and_quality_assurance&quot;&gt;fan-out&lt;/a&gt; e 
entre outras&lt;/li&gt;
  &lt;li&gt;Publiquei 4 postagens no &lt;a href=&quot;https://blog.palaimon.io/&quot;&gt;blog Palaimon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Publiquei um artigo sobre o Ipyannotator no &lt;a href=&quot;https://joss.theoj.org/papers/10.21105/joss.04480&quot;&gt;Journal of Open Software (JOSS)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Fui atribuido a mais responsabilidades como engenheiro de dados. Desenvolvi um plugin 
&lt;a href=&quot;https://intake.readthedocs.io/en/latest/&quot;&gt;intake&lt;/a&gt; 
para judar a equipe com o 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Data_Version_Control&quot;&gt;versionamento de dados e experimentos&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Aprendi os usos e dores da biblioteca OpenCV trabalhando no 
&lt;a href=&quot;https://blog.palaimon.io/posts/citycount-finalization/&quot;&gt;projeto CityCount&lt;/a&gt;
Esse projeto foi um bom caso de teste tanto pra solução de versionamento de dados que utiliza o intake, 
quanto para a biblioteca Ipyannotator&lt;/li&gt;
  &lt;li&gt;Testei, refatores e estendi soluções IA para &lt;a href=&quot;https://en.wikipedia.org/wiki/Multiple_object_tracking&quot;&gt;Detecção de multiples objetos (MOT)&lt;/a&gt;. A maioria das soluções IA não testa seu código, dificultando sua refatoração e estenção, 
para o nosso caso de uso foi necessário escrever vários testes antes de modificar o código, o que melhorou não só 
a qualidade do software quanto o entendimento do código&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">2022 foi um ano longo. O mercado de tecnologia começou a esfriar e até as grandes empresas começaram a demitir em massa, alguns amigos foram atingidos pelas demissões, mas ainda bem que todos já encontraram um novo lugar para trabalhar. A política brasileira batalhou por sua frágil democracia (e ainda bem que ganhou, mesmo que por pouco). Eu também aprendi um monte de coisas sobre a área de inteligência artificial (IA).</summary></entry><entry><title type="html">Programação letrada com Jupyter Notebook e Nbdev</title><link href="https://itepifanio.github.io//pt/2022/08/16/programacao-letrada.html" rel="alternate" type="text/html" title="Programação letrada com Jupyter Notebook e Nbdev" /><published>2022-08-16T20:09:20+00:00</published><updated>2022-08-16T20:09:20+00:00</updated><id>https://itepifanio.github.io//pt/2022/08/16/programacao-letrada</id><content type="html" xml:base="https://itepifanio.github.io//pt/2022/08/16/programacao-letrada.html">&lt;p&gt;O ambiente de desenvolvimento &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter notebook&lt;/a&gt; é muito popular entre a comunidade científica. Com essa ferramenta você consegue escrever texto em formato markdown e código Python (R ou Julia) no mesmo arquivo, algo que pode melhorar a legibilidade e entendimento do seu programa. Esse paradigma, que mistura texto e código, é chamado de &lt;a href=&quot;https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_letrada&quot;&gt;programação letrada&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Um exemplo de Jupyter notebook pode ser vista na imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/jupyter-markdown-and-code.png&quot; alt=&quot;Parte de um Jupyter notebook que inclui uma seção com texto em formato markdown e código python&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Programação letrada é um paradigma muito bem conceituado, formalmente discutido por muitos pesquisadores respeitados mundialmente como o &lt;a href=&quot;https://pt.wikipedia.org/wiki/Donald_Knuth&quot;&gt;Donald Knuth&lt;/a&gt;. Ao mesmo tempo, Jupyter notebooks são considerados ineficientes para o desenvolvimento de software. Essa controversia levou a criação da famosa palestra “&lt;a href=&quot;https://www.youtube.com/watch?v=7jiPeIFXb6U&quot;&gt;Eu não gosto de notebooks&lt;/a&gt;”, respondida por outra palestra intitulada “&lt;a href=&quot;https://www.youtube.com/watch?v=7jiPeIFXb6U&quot;&gt;Eu gosto de Jupyter notebooks&lt;/a&gt;” que gerou &lt;a href=&quot;https://www.fast.ai/2020/10/28/code-of-conduct/&quot;&gt;bastante drama&lt;/a&gt; na comunidade Python.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/i-like-notebooks.jpg&quot; alt=&quot;Capa do vídeo &amp;quot;Eu gosto de Jupyter notebooks&amp;quot; que, além do título garrafal, mostra ao fundo o Lula Molusco em cima de um palco, se esquivando de tomates sendo jogados pela plateia&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jupyter notebooks tem sido limitados a exploração de dados, pequenos scripts e materiais educacionais. A recente introdução da &lt;a href=&quot;https://nbdev.fast.ai/&quot;&gt;Nbdev&lt;/a&gt;, uma biblioteca python, expandiu as possibilidades desses notebooks. Nbdev permite o desenvolvimento e distribuição de pacotes python enquanto se beneficia do paradigma de programação letrada, permitindo a execução de testes, documentação do software em tempo real (unindo texto e código), publicação da documentação como arquivos estáticos ou simplesmente o desenvolvimento de material técnico.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nbdev permite que você conte uma história com o seu código. É uma ferramenta prática e poderosa!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nbdev tem se provado útil no desenvolvimento de grandes e sérios projetos como o &lt;a href=&quot;https://github.com/fastai/fastai&quot;&gt;FastAi&lt;/a&gt;. A utilização da biblioteca Nbdev com Jupyter notebooks permite o desenvolvimento de softwares com qualidade e com os benefícios da programação letrada.&lt;/p&gt;

&lt;h2 id=&quot;experiência&quot;&gt;Experiência&lt;/h2&gt;

&lt;p&gt;Minha primeira experiência com Nbdev foi a de estranhamento. Trabalhar com Jupyter notebooks para desenvolvimento sério de software não me parecia natural, algo esperado, afinal é um novo paradigma de programação.&lt;/p&gt;

&lt;p&gt;A ferramenta em que estou trabalhando atualmente, &lt;a href=&quot;https://github.com/palaimon/ipyannotator&quot;&gt;Ipyannotator&lt;/a&gt;, é um framework de anotações open source que contém interfaces gráficas que funcionam no Jupyter notebook. O desenvolvimento do Ipyannotator só foi possível graças a ferramenta Nbdev que permitiu o time testar o software em notebooks e exportar o código como uma biblioteca python.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Depois de um ano desenvolvendo software com Jupyter notebook eu sinto que isso melhorou minha produtividade&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esse paradigma de desenvolvimento de software me permitiu manter a minha documentação atualizada, uma vez que a documentação está naturalmente acima do meu bloco de código Python. O paradigma também reduziu o lapso mental de voltar a um código antigo, facilitando o entendimento do código uma vez que decisões prévias estavam documentadas em blocos markdown.&lt;/p&gt;

&lt;h2 id=&quot;quarto&quot;&gt;Quarto&lt;/h2&gt;

&lt;p&gt;No dia 28 de Julho, Nbdev lançou sua segunda versão, incorporando outra ferramenta open source no seu arsenal: &lt;a href=&quot;https://quarto.org/&quot;&gt;Quarto&lt;/a&gt;. Quarto é uma ferramenta que permite a criação de conteúdo técnico utilizando Python, R ou Julia, utilizando diversos tipos de arquivo, seja markdown, Jupyter notebooks, R notebooks e permitindo exportar esses arquivos como arquivos, websites, blogs, HTML, PDFs, EPubs e até slides.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quarto é uma solução completa para escrever qualquer material técnico, utilizando as ferramentas que você já conhece.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essa ferramenta é tão legal que estou planejando migrar &lt;a href=&quot;https://itepifanio.github.io&quot;&gt;o meu blog pessoal&lt;/a&gt; de Jekyll para Quarto. O design clean, de fácil usabilidade e com a funcionalidade de executar código embutido em blocos de texto, se encaixa perfeitamente em qualquer requisito de escrita técnica.&lt;/p&gt;

&lt;p&gt;Nbdev notou o quão poderoso Quarto pode ser. Essa adição do Quarto ao core do Nbdev ajudou a renderizar melhor sites e documentações. A primeira versão da biblioteca Nbdev já continha essas funcionalidades, mas elas eram rudimentares e precisavam de diversas gambiarras.&lt;/p&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Desenvolvimento com Nbdev e Quarto pode melhorar a produtividade de diversos times, ajudando a documentar e contar a história do seu código. Essas ferramentas ajudam a expandir as possibilidades de desenvolvimento de software, assim como foi o caso do já exemplificado &lt;a href=&quot;https://github.com/palaimon/ipyannotator&quot;&gt;Ipyannotator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Como qualquer ferramenta, Nbdev também tem lados negativos. Um deles é a falta do auto completar em Jupyter notebooks, algo que pode ser remediado com a utilização de extensões do Visual Code, por exemplo. Outro problema é que, por conta dos Jupyter notebooks serem escritos em formato json, um formato que dificulta a resolução de conflitos git por conta de todos os metadados extras. Dificultar a resolução de conflitos minimiza as chances de grandes equipes de trabalhar no mesmo software.&lt;/p&gt;

&lt;p&gt;Felizmente, a adição de Quarto mostra que Nbdev já planeja dar suporte a outros tipos de arquivos além de Jupyter notebooks. Isso permitiria que times maiores conseguissem desenvolver software com programação letrada, diminuindo o maior defeito da ferramenta, que é a resolução de conflitos.&lt;/p&gt;

&lt;p&gt;Se você se interessou em tentar usar Nbdev você pode checar as seguintes referências:
&lt;a href=&quot;https://www.fast.ai/2022/07/28/nbdev-v2/&quot;&gt;Nbdev+Quarto: Uma nova arma secreta de produtividade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se ficou curioso sobre como é o código Jupyter notebook para desenvolvimento de software você pode olhar o &lt;a href=&quot;https://github.com/palaimon/ipyannotator/tree/main/nbs&quot;&gt;código do Ipyannotator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Post originalmente postado no blog Palaimon: https://blog.palaimon.io/posts/literate-programming-nbdev/&lt;/p&gt;</content><author><name></name></author><summary type="html">O ambiente de desenvolvimento Jupyter notebook é muito popular entre a comunidade científica. Com essa ferramenta você consegue escrever texto em formato markdown e código Python (R ou Julia) no mesmo arquivo, algo que pode melhorar a legibilidade e entendimento do seu programa. Esse paradigma, que mistura texto e código, é chamado de programação letrada.</summary></entry><entry><title type="html">Objeto hashable em Python</title><link href="https://itepifanio.github.io//pt/2022/07/24/objetos-hashable-em-python.html" rel="alternate" type="text/html" title="Objeto hashable em Python" /><published>2022-07-24T23:38:37+00:00</published><updated>2022-07-24T23:38:37+00:00</updated><id>https://itepifanio.github.io//pt/2022/07/24/objetos-hashable-em-python</id><content type="html" xml:base="https://itepifanio.github.io//pt/2022/07/24/objetos-hashable-em-python.html">&lt;p&gt;Hash de objetos é uma representação númerica inteira que é obtida utilizando o &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#special-method-names&quot;&gt;dunder method&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__hash__&lt;/code&gt;. Compreender esse conceito ajuda a entender como as estruturas de dados Python funcionam, uma vez que o hash dos objetos são utilizados internamente.&lt;/p&gt;

&lt;p&gt;Programadores Python costumam se deparar com o conceito de hash de objetos quando tentam armazenar um objeto sem hash em uma estrutura de dados da linguagem. Por exemplo:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dataclasses&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataclass&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataclass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pessoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cpf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pessoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ítalo Epifânio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1010101010&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pessoas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pessoas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O código acima define uma classe pessoa e um objeto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; do tipo pessoa. Ao tentar adicionar uma pessoa ao conjunto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pessoas&lt;/code&gt; o seguinte erro é lançado:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Traceback &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
  File &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line 1, &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
TypeError: unhashable &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'Pessoa'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Isso acontece porque a estrutura de dados “conjunto” do Python utiliza o hash em suas tabelas internas para encontrar o valor do objeto rapidamente. Como nosso objeto não tem hash, o erro acima é lançado.&lt;/p&gt;

&lt;p&gt;Para adicionar um hash a um objeto implementa-se as funções &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__hash__&lt;/code&gt; e &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__eq__&lt;/code&gt; simultaneamente (caso esteja utilizando Python 2 a função &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__ne__&lt;/code&gt; também deve ser adicionada). No exemplo a seguir modificamos nossa classe anterior para adquirir essa propriedade.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataclass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pessoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cpf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__hash__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mesma_classe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mesmo_cpf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpf&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesma_classe&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesmo_cpf&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pessoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ítalo Epifânio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;101.010.101-01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pessoas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pessoas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Agora o código consegue ser executado sem o erro anterior. Se executarmos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print(pessoas)&lt;/code&gt; veremos que o conjunto contém o seguinte valor:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Pessoa&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Ítalo Epifânio'&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;cpf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1010101010&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Um objeto é dito hashable se o valor de hash nunca é modificado durante sua fase de vida
– &lt;cite&gt; &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-hashable&quot;&gt;Python Docs&lt;/a&gt; &lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apenas implementar os dunder métodos acima não garante que o objeto é hashable. É preciso garantir o valor de hash desse objeto jamais sejá alterado pois isso pode levar a comportamentos não esperados, por exemplo:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pessoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ítalo Epifânio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;101.010.101-01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pessoas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pessoas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pessoas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# retorna True
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;999.999.999-99&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pessoas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# retorna False
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pessoas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# retorna {Pessoa(nome='Ítalo Epifânio', cpf='999.999.999-99')}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ao alterar o cpf do objeto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; note que o objeto não é mais encontrado na estrutura de dados conjunto (a segunda chamada do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print(p in pessoas)&lt;/code&gt; retorna falso) e quando lista-se os valores do conjunto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pessoas&lt;/code&gt; nota-se que há ainda um valor lá.&lt;/p&gt;

&lt;p&gt;Em resumo: você não pode basear hash de objetos em valores mutáveis. Se o atributo de um objeto pode ser modificado durante seu ciclo de vida comportamentos inesperados podem acontecer.&lt;/p&gt;</content><author><name></name></author><summary type="html">Hash de objetos é uma representação númerica inteira que é obtida utilizando o dunder method __hash__. Compreender esse conceito ajuda a entender como as estruturas de dados Python funcionam, uma vez que o hash dos objetos são utilizados internamente.</summary></entry><entry><title type="html">Meu ano de 2021</title><link href="https://itepifanio.github.io//pt/2022/01/04/meu-ano-de-2021.html" rel="alternate" type="text/html" title="Meu ano de 2021" /><published>2022-01-04T00:05:37+00:00</published><updated>2022-01-04T00:05:37+00:00</updated><id>https://itepifanio.github.io//pt/2022/01/04/meu-ano-de-2021</id><content type="html" xml:base="https://itepifanio.github.io//pt/2022/01/04/meu-ano-de-2021.html">&lt;p&gt;Uma revisão do meu ano de 2021. Pra mim foi um ano de tirar o mofo de algumas paredes: sai de um kitnet para um apartamento com dois quartos (um só pra escritório :) ), mudei de emprego, adotei um novo projeto open source.&lt;/p&gt;

&lt;h2 id=&quot;eventos&quot;&gt;Eventos&lt;/h2&gt;

&lt;p&gt;Participei de poucos eventos em 2021. Como desenvolvedor PHP eu tentei ajudar a organizar o &lt;a href=&quot;https://twitter.com/phpestene&quot;&gt;PHPeste&lt;/a&gt;, mas infelizmente o evento não saiu do papel. Realizar um evento online é muito mais complicado, todo o meu respeito a quem fez acontecer!&lt;/p&gt;

&lt;p&gt;Como participante eu estive na Python Nordeste e Python Brasil.&lt;/p&gt;

&lt;p&gt;Na Python Nordeste eu só consegui ver os keynotes, tanto o da &lt;a href=&quot;https://www.youtube.com/watch?v=qj5i9YvFYy8&quot;&gt;Ana Paula&lt;/a&gt;, quanto o da &lt;a href=&quot;https://www.youtube.com/watch?v=oW_CqDRxJtI&quot;&gt;Clara Nobre&lt;/a&gt;. Foram duas palestras importantes pra discutir comunidade e inclusão.&lt;/p&gt;

&lt;p&gt;Na Python Brasil eu participei mais ativamente, vi todos os Keynotes, partipei de mesa de conversa e das sprints. Vi a palestra da &lt;a href=&quot;https://www.youtube.com/watch?v=lgGJyCg_kt8&amp;amp;feature=youtu.be&quot;&gt;Débora Azevedo&lt;/a&gt; sobre a Python Software Foundation e aprendi bastante sobre a organização por trás do Python. Participei da sprint do &lt;a href=&quot;https://queridodiario.ok.org.br/&quot;&gt;Querido Diário&lt;/a&gt; e adicionei &lt;a href=&quot;https://github.com/okfn-brasil/querido-diario/issues/489&quot;&gt;o crawler&lt;/a&gt; para o diário municipal da minha cidade natal Pau dos Ferros/RN.&lt;/p&gt;

&lt;h2 id=&quot;hacktoberfest&quot;&gt;Hacktoberfest&lt;/h2&gt;

&lt;p&gt;O crawler do Querido Diário foi uma das minhas contribuições pro &lt;a href=&quot;https://hacktoberfest.digitalocean.com/&quot;&gt;Hacktoberfest&lt;/a&gt;. Foi minha quinta participação no evento.&lt;/p&gt;

&lt;p&gt;Além do Querido Diário, contribui também para o &lt;a href=&quot;https://github.com/wireui/wireui&quot;&gt;WireUI&lt;/a&gt;, o projeto de um amigo que disponibiliza inputs customizáveis e simples para uso com o Laravel e Livewire (olhem e roubem o template de documentação dele, lindão!).&lt;/p&gt;

&lt;h2 id=&quot;explorações&quot;&gt;Explorações&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Adotei o querido diário como projeto open source. Sugeri adicionar o projeto a disciplina de ciências de dados da UFRN e estou ajudando dois grupos a trabalharem com o projeto.&lt;/li&gt;
  &lt;li&gt;Como desenvolvedor PHP fiz umas coisinhas bem legais:
    &lt;ul&gt;
      &lt;li&gt;Ajudei a fazer várias refatorações em um projeto legado do trabalho, saindo de pouco mais de 100 testes pra mais de 450 em menos de 05 meses&lt;/li&gt;
      &lt;li&gt;Desenvolvi uma funcionalidade super legal de geolocalização. Um vendedor podia atender/visualizar/interagir com clientes de acordo com sua localização e áreas assignadas a ele (que eram desenhadas sob um mapa). Isso merece um post, tá no meu roadmap :p&lt;/li&gt;
      &lt;li&gt;Desenvolvi um sistema de workflow com regras lógicas de and/or que permitia gerentes criarem fluxos como: se um cliente tivesse seu status atualizado para “esperando design” uma nova task para os designers era criada; ou se um cliente tivesse o seu pagamento aprovado um sms era enviado a ele.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Virei um pesquisador e programador Python, hehe, e estou ajudando a desenvolver o &lt;a href=&quot;https://github.com/palaimon/ipyannotator&quot;&gt;Ipyannotator&lt;/a&gt; um anotador que ajuda a construir o arcabouço para projetos de &lt;i&gt;machine learning&lt;/i&gt; em notebooks jupyter. Fazem dois meses que estou no projeto, mas já fiz umas coisinhas bem legais.
    &lt;ul&gt;
      &lt;li&gt;Aprendi muito sobre desenvolvimento para notebooks jupyter. Principalmente sobre a biblioteca &lt;a href=&quot;https://github.com/fastai/nbdev&quot;&gt;nbdev&lt;/a&gt; que permite a construção de bibliotecas python utilizando &lt;a href=&quot;https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_liter%C3%A1ria&quot;&gt;“programação letrada”&lt;/a&gt;. Além das bibliotecas de desenvolvimento de interfaces gráficas para notebooks jupyter: &lt;a href=&quot;https://ipycanvas.readthedocs.io/en/latest/&quot;&gt;ipycanvas&lt;/a&gt;, &lt;a href=&quot;https://ipywidgets.readthedocs.io/en/latest/&quot;&gt;ipywidgets&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;Refatorei todo o sistema de anotação para diminuir o acoplamento dos anotadores. Isso resultou em uma nova camada de estados para cada um dos anotadores. A solução é bem legal, usa o &lt;a href=&quot;https://pydantic-docs.helpmanual.io/&quot;&gt;Pydantic&lt;/a&gt; para validação dos dados e o &lt;a href=&quot;https://pypubsub.readthedocs.io/en/v4.0.3/&quot;&gt;PyPubSub&lt;/a&gt; para o sistema de eventos GUI.&lt;/li&gt;
      &lt;li&gt;Se você se interessar pelo projeto eu desenvolvi também &lt;a href=&quot;https://github.com/palaimon/ipyannotator/blob/main/nbs/11-build-annotator-tutorial.ipynb&quot;&gt;um tutorial&lt;/a&gt; mostrando como um construir um novo anotador para ele.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Na faculdade eu:
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;Compliquei&lt;/del&gt; desenvolvi uma arquitetura para comunicação entre um sistema web e &lt;a href=&quot;https://github.com/itepifanio/sistemas-embarcados&quot;&gt;um sistema de câmeras para controle e gerenciamento de filas do RU&lt;/a&gt;. A ideia é que câmeras tiram fotos a cada 30 segundos e atualizam o sistema que: processa o nível da fila, descarta a imagem e envia as informações para uma API. Essa API permite que os alunos visualizem o quão cheia tá a fila do RU naquele momento.&lt;/li&gt;
      &lt;li&gt;Aprendi sobre RMI e Middlewares. Como prova de conceito de middlewares utilizei o sistema &lt;a href=&quot;https://fiware-tutorials.readthedocs.io/&quot;&gt;Fiware&lt;/a&gt; para desenvolver uma aplicação que permitia que canais de TV cadastrassem seus filmes (com o gênero de filme), usuários de TV se registrassem para receber notificação de algum gênero de filme e fosse notificado minutos antes do filme começar.&lt;/li&gt;
      &lt;li&gt;Desenvolvi algumas soluções pro jogo dos 8 números.&lt;/li&gt;
      &lt;li&gt;Aprendi bastante sobre tópicos de especificação e verificação de programas usando o &lt;a href=&quot;http://maude.cs.illinois.edu/w/index.php/The_Maude_System&quot;&gt;Maude&lt;/a&gt; e &lt;a href=&quot;https://www.atelierb.eu/en/atelier-b-tools/&quot;&gt;Atelier B&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;Implementei o algoritmo Dsatur para a coloração de grafos e defini que queria trabalhar com isso no TCC.&lt;/li&gt;
      &lt;li&gt;Iniciei o TCC.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Uma revisão do meu ano de 2021. Pra mim foi um ano de tirar o mofo de algumas paredes: sai de um kitnet para um apartamento com dois quartos (um só pra escritório :) ), mudei de emprego, adotei um novo projeto open source.</summary></entry><entry><title type="html">Carregamento lento com scroll horizontal</title><link href="https://itepifanio.github.io//pt/2021/10/23/carregamento-lento-scroll-horizontal.html" rel="alternate" type="text/html" title="Carregamento lento com scroll horizontal" /><published>2021-10-23T20:09:20+00:00</published><updated>2021-10-23T20:09:20+00:00</updated><id>https://itepifanio.github.io//pt/2021/10/23/carregamento-lento-scroll-horizontal</id><content type="html" xml:base="https://itepifanio.github.io//pt/2021/10/23/carregamento-lento-scroll-horizontal.html">&lt;p&gt;Recentemente me deparei com o seguinte cenário: um sistema de gerenciamentos de fluxos de trabalho que permite configuração  de kanbans, como o da imagem abaixo, sendo que um usuário em particular configurou seu kanban com 38 colunas.&lt;/p&gt;

&lt;p&gt;Cada coluna do kanban realizava uma requisição e do jeito que o sistema tinha sido desenvolvido gerava-se 38 requisições assim que a página era carregada, o que acabava espancando o banco de dados e o servidor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ui3slceaoxqovpxm1uo.jpg&quot; alt=&quot;Ilustração de um kanban com cinco colunas na sequência: stories, todo, in progress, testing, done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inicialmente precisavamos diminuir a quantidade de requisições, limitando apenas aos cards visíveis na tela do usuário. Depois precisavamos fazer com que, caso o usuário rolasse para o fim da página de uma vez, as colunas que ficaram visíveis não carregassem a menos que estivessem a um certo tempo visíveis.&lt;/p&gt;

&lt;h2 id=&quot;limitando-o-carregamento-aos-cards-visíveis&quot;&gt;Limitando o carregamento aos cards visíveis&lt;/h2&gt;

&lt;p&gt;O javascript oferece uma API chamada &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver&quot;&gt;IntersectionObserver&lt;/a&gt; que permite monitorar elementos HTML e verificar sua visibilidade na tela. O código abaixo mostra o funcionamento mais básico dela.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onIntersection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isIntersecting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;is visible&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IntersectionObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onIntersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.my-elements&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A função &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onIntersection&lt;/code&gt; é responsável pela lógica que será aplicada aos elementos visiveis, ela recebe uma lista de elementos e verifica que se forem visiveis (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; element.isIntersecting &lt;/code&gt;) então algo será feito, nesse caso uma mensagem no console é exibida.&lt;/p&gt;

&lt;p&gt;A chamada da API ` IntersectionObserver ` é feita e atribuida a variável ` observer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;. O objeto &lt;/code&gt; observer ` conseguirá a partir dali observar elementos no HTML e executar uma lógica somente quando eles forem visíveis na tela do usuário. No meu caso, do kanban gigante, isso foi suficiente para limitar as 38 requisições assim que a página carregava para apenas 5, mas caso o usuário rolasse a página rapidamente várias requisições seriam feitas, ou seja, se eu fosse até o fim da página de uma vez as outras 33 requisições seriam chamadas também de uma vez só.&lt;/p&gt;

&lt;h2 id=&quot;carregamento-apenas-após-certo-tempo-do-elemento-visível-na-página&quot;&gt;Carregamento apenas após certo tempo do elemento visível na página&lt;/h2&gt;

&lt;p&gt;A API ` IntersectionObserver ` tem uma &lt;a href=&quot;https://web.dev/intersectionobserver-v2/&quot;&gt;versão 2&lt;/a&gt; que permite a captura de quanto tempo um certo elemento HTML ficou visível na tela e isso resolveria facilmente o problema de carregar o elemento HTML apenas depois de certo tempo. Entretanto, a versão 2 ainda não tem suas implementações compativeis com a maioria dos navegadores.&lt;/p&gt;

&lt;p&gt;No meu caso específico eu estava utilizando um componente pai que renderizava os 38 elementos filhos e eu não conseguia verificar quando esses 38 elementos filhos terminaram de ser renderizados para observa-los com o ` InsertersectionObserver `, então controlar o tempo que cada elemento ficou visível na tela ficou um pouco mais complicado.&lt;/p&gt;

&lt;p&gt;Cada um dos 38 elementos filhos sabiam quando eles mesmos eram renderizados, então conseguia-se utilizar a ` IntersectionObserver ` internamente em cada um deles. Utilizando a função ` setTimeout ` do javascript consegue-se observação o elemento após um certo tempo especificado em milisegundos.&lt;/p&gt;

&lt;p&gt;Temos 38 elementos ao todo, só que a maioria não é visível na tela e se torna visível ao scrollar, com o delay do ` setTimeout ` essa ação leva ainda algum tempo a ser executada. Durante o scroll, quando o elemento visível na tela ainda não disparou o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; especificado e o usuário já scrollou para um elemento seguinte consegue-se remover o timeout do elemento anterior da pilha de execução e então carregar somente o elemento seguinte. O código a seguir mostra essa estratégia.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;border border-black m-1 p-10 min-w-max h-10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;() =&amp;gt; {
           let timeout;
           let loadColumn = function (elements) {
               clearTimeout(timeout);
               
               timeout = setTimeout(function() {
                   elements.forEach(element =&amp;gt; {
                       if (element.isIntersecting) {
                           // do something
                           observer.unobserve(element.target);
                       }
                   });
               }, 750);
           }
           
           let observer = new IntersectionObserver(loadColumn);
           let target = $el;
           observer.observe(target);
       }&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Quando o componente é carregado na página ele já começa a observar a si mesmo utilizando a função ` loadColumn `. Tal função remove os timeouts anteriores (que não foram acionados) da pilha de execução e adiciona um novo timeout que após 750 milisegundos faz algo e remove a observação para não refazer a mesma lógica se o elemento se tornar visível novamente.&lt;/p&gt;

&lt;p&gt;No meu caso a lógica era a requisição para o servidor então eu só precisava carregar o dado uma vez e depois ignorar se o elemento ficasse visível novamente na página, por isso ele remove a própria observação.&lt;/p&gt;

&lt;p&gt;Achou a sintaxe do código acima estranha? Esse microframework javascript se chama &lt;a href=&quot;https://alpinejs.dev/&quot;&gt;AlpineJS&lt;/a&gt; e foi o que utilizei para desenvolver a solução completa. Uma POC mais simples, sem a requisição pro servidor, pode ser vista logo abaixo. Após ficar visível na sua tela os quadrados brancos se tornarão pretos indicando a requisição pro servidor.&lt;/p&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;PoKqGPm&quot; data-default-tab=&quot;result&quot; data-user=&quot;&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io//pen/PoKqGPm/&quot;&gt;Carregamento lento com scroll horizontal&lt;/a&gt; by  (&lt;a href=&quot;http://codepen.io/&quot;&gt;@&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Caso se interesse por ver uma solução com vanilla javascript  a minha referência &lt;a href=&quot;https://www.codeguage.com/tutorials/lazy-loading/intersection-observer&quot;&gt;foi essa&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Recentemente me deparei com o seguinte cenário: um sistema de gerenciamentos de fluxos de trabalho que permite configuração de kanbans, como o da imagem abaixo, sendo que um usuário em particular configurou seu kanban com 38 colunas.</summary></entry><entry><title type="html">TALL - Uma nova stack para PHP</title><link href="https://itepifanio.github.io//pt/2020/06/19/tall-uma-nova-stack-para-php.html" rel="alternate" type="text/html" title="TALL - Uma nova stack para PHP" /><published>2020-06-19T20:09:20+00:00</published><updated>2020-06-19T20:09:20+00:00</updated><id>https://itepifanio.github.io//pt/2020/06/19/tall-uma-nova-stack-para-php</id><content type="html" xml:base="https://itepifanio.github.io//pt/2020/06/19/tall-uma-nova-stack-para-php.html">&lt;p&gt;&lt;a href=&quot;https://tailwindcss.com/&quot;&gt;&lt;strong&gt;T&lt;/strong&gt;ailwind&lt;/a&gt;, &lt;a href=&quot;https://github.com/alpinejs/alpine&quot;&gt;&lt;strong&gt;A&lt;/strong&gt;lpinejs&lt;/a&gt;, &lt;a href=&quot;https://laravel.com/&quot;&gt;&lt;strong&gt;L&lt;/strong&gt;aravel&lt;/a&gt; e &lt;a href=&quot;https://laravel-livewire.com/&quot;&gt;&lt;strong&gt;L&lt;/strong&gt;ivewire&lt;/a&gt; (&lt;strong&gt;TALL&lt;/strong&gt;) é uma solução para desenvolvedores full stack &lt;a href=&quot;https://tallstack.dev/&quot;&gt;construída pela comunidade laravel&lt;/a&gt; que foca principalmente no desenvolvimento backend, mas que permite o desenvolvimento de sistemas ditos “reativos”.&lt;/p&gt;

&lt;p&gt;A stack TALL é ótima para desenvolvimento rápido de sistemas web. A facilidade de estilizar páginas com o Tailwind, o poder da reatividade do Alpinejs, aliado com a componentização do Livewire, realmente dá um boost de produtividade no desenvolvimento.&lt;/p&gt;

&lt;p&gt;Nesse artigo falarei um pouco sobre as 4 tecnologias e minha experiência com a stack.&lt;/p&gt;

&lt;h2 id=&quot;livewire&quot;&gt;Livewire&lt;/h2&gt;

&lt;p&gt;É muito comum encontrar sistemas que utilizam Laravel em conjunto com o Vuejs. A utilização de componentes Vue remove muito da responsabilidade da blade, por exemplo, é comum encontrarmos blades do tipo:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layouts&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endsection&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Caleb, criador do Alpinejs e Livewire, &lt;a href=&quot;https://www.youtube.com/watch?v=uQO4Xh1gMpY&quot;&gt;chama&lt;/a&gt; esses componentes de “assassinos de blades”. Vue é uma ferramenta poderosa, mas o tempo gasto tratando eventos assíncronos, adicionando v-ifs, atualizando bibliotecas, atrasa o desenvolvimento e torna a experiência um pouco maçante. Parte do atraso mencionado se deve a falta de testes unitários, eu, particularmente, não conheço ninguém que utilize testes unitários com Vue e isso é bem problemático quando encontramos blades e blades como a exibida acima.&lt;/p&gt;

&lt;p&gt;Quanto mais se trabalha com Vue e Laravel mais sentimos a necessidade de escrever um código javascript melhor, aprender Vuex, utilizar testes unitários nele usando Jest ou outra lib. Vamos adicionando camadas e camadas de complexidade para algo que deveria ser simples: requisição e exibição de dados (o pior dos casos é quando regra de negócio entra em front-end, debugar um erro em um código assim é uma grande dor de cabeça).&lt;/p&gt;

&lt;p&gt;Caleb propõe uma solução voltada mais ao backend, intrínseca ao Laravel, o Livewire. É difícil definir a ferramenta, mas é como se escrevessemos código Laravel como componentes. A definição oficial é: ` Livewire is a full-stack framework for Laravel that makes building dynamic interfaces simple, without leaving the comfort of Laravel. `.&lt;/p&gt;

&lt;p&gt;O Livewire é ótimo para situações em que o nosso usuário interage com a tela e espera uma ação imediata, ele irá fazer uma requisição ajax e atualizar o front automaticamente (como se a página fosse reativa). Um exemplo, visto abaixo, retirado do &lt;a href=&quot;https://medium.com/@branick/search-with-laravel-livewire-cb6dcd4ad541&quot;&gt;artigo do Branick&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*vTfmPgyEaCmPgqpR8DDWzw.gif&quot; alt=&quot;Search with Laravel Livewire&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O Livewire é uma ferramenta muito poderosa que permite reaproveitar código através dos componentes, além de facilitar e agilizar o desenvolvimento de interfaces ricas, sem ter que chamar bibliotecas JS externas, sem sair do arcabouço Laravel e podendo realizar testes unitários nos componentes. Entretanto todas essas facilidades tem um preço, que é o custo de renderizar novamente HTML toda vez que se faz uma requisição. O Livewire não é uma “bala de prata” e deve ser utilizado com cautela.&lt;/p&gt;

&lt;h2 id=&quot;tailwind&quot;&gt;Tailwind&lt;/h2&gt;

&lt;p&gt;O Tailwind é um framework CSS com uma abordagem &lt;em&gt;utility-first&lt;/em&gt;
, o código CSS é abstraído no HTML como classes. Por exemplo, o código ` &amp;lt;div style=&quot;background-color:black; border-radius: 100%&quot;&amp;gt;&amp;lt;/div&amp;gt; ` no Tailwind ficaria ` &amp;lt;div class=&quot;bg-black round-full&quot;&amp;gt;&amp;lt;div&amp;gt; `.&lt;/p&gt;

&lt;p&gt;O primeiro contato com o framework é estranho porque o HTML se torna extenso de escrever, mas a medida que vamos utilizando vemos o quão ágil é utilizar o Tailwind. As páginas são escritas eficientemente, se inspeciona elemento, muda as classes, copia para o código e em minutos você tem algo funcional que levaria  mais tempo para fazer utilizando Bootstrap.&lt;/p&gt;

&lt;p&gt;Esse esquema quase de prototipação de páginas é ótimo para fábricas de software. Uma vez que os desenvolvedores pegam o jeito como o framework se torna fácil pegar um design do Adobe XD e dar vida no HTML.&lt;/p&gt;

&lt;h2 id=&quot;alpinejs&quot;&gt;AlpineJS&lt;/h2&gt;

&lt;p&gt;O Alpinejs é um microframework JS, reativo, muito parecido com Vue (só que bem mais simples) que facilita manipulações do DOM. Por ter sido criado pela mesma pessoa, o Alpinejs funciona muito bem com integrações com o Livewire. Todos os gargalos de performance encontrados no Livewire eu consegui contornar utilizando o Alpine em conjunto.&lt;/p&gt;

&lt;p&gt;Um exemplo de utilização do Alpine em conjunto com o Tailwind pode ser visto abaixo. Note que o código HTML mantém a estilização e o JS embutido, é muito simples e rápido estilizar e modificar o DOM utilizando as duas ferramentas em conjunto.&lt;/p&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;VwvreoP&quot; data-default-tab=&quot;result&quot; data-user=&quot;&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io//pen/VwvreoP/&quot;&gt;Simple CRUD&lt;/a&gt; by  (&lt;a href=&quot;http://codepen.io/&quot;&gt;@&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;A curva de aprendizado do framework é muito baixa porque ele é bem pequeno, além de procurar se aproximar bastante da sintaxe do Vue (velho conhecido dos devs fullstack Laravel).&lt;/p&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Estou trabalhando com a stack a cerca de três ou quatro meses, escrevendo uma nova versão de um sistema que antes era feito com Laravel e Vue. O design foi criado no Adobe XD e em questão de uma a duas semanas já tínhamos passado completamente pro Tailwind. A utilização do Livewire foi feita a medida da necessidade, em geral, situações que exigiria requisições ajax ou que apelariamos para o Vue, se tornaram componentes Livewire.&lt;/p&gt;

&lt;p&gt;A impressão é que o novo sistema de componentes blade do Laravel 6 e as novas funcionalidades do Laravel 7 também colaboraram muito para essa nova forma de escrever sistemas, tornando natural codar no Laravel componentizado e associar o Livewire nas blades.&lt;/p&gt;

&lt;p&gt;No começo do projeto eu não conhecia Livewire, Alpinejs e nem o Tailwind, mas é muito bom sair do conforto com esses três. Como o Tailwind é mais “baixo nível” que o Bootstrap eu acabei aprendendo flexbox e vários outros detalhes de CSS que eu desconhecia. O mesmo aconteceu com o Alpinejs, por ser pequeno boa parte do código feito com ele é JS puro.&lt;/p&gt;

&lt;p&gt;O Tall potencializa as tecnologias básicas que usamos no dia a dia (JS, CSS, PHP) tornando o desenvolvimento bem mais divertido e sem necessidade de adicionar bibliotecas terceiras que acabam complicando a manutenção posterior do sistema. Além disso, o que mais curto na stack, é que se aproveita ao máximo o uso do Laravel.&lt;/p&gt;</content><author><name></name></author><summary type="html">Tailwind, Alpinejs, Laravel e Livewire (TALL) é uma solução para desenvolvedores full stack construída pela comunidade laravel que foca principalmente no desenvolvimento backend, mas que permite o desenvolvimento de sistemas ditos “reativos”. A stack TALL é ótima para desenvolvimento rápido de sistemas web. A facilidade de estilizar páginas com o Tailwind, o poder da reatividade do Alpinejs, aliado com a componentização do Livewire, realmente dá um boost de produtividade no desenvolvimento. Nesse artigo falarei um pouco sobre as 4 tecnologias e minha experiência com a stack. Livewire É muito comum encontrar sistemas que utilizam Laravel em conjunto com o Vuejs. A utilização de componentes Vue remove muito da responsabilidade da blade, por exemplo, é comum encontrarmos blades do tipo: @extends(‘layouts.base’) @section(‘content’) &amp;lt;some-vue-component&amp;gt;&amp;lt;/some-vue-component&amp;gt; @endsection Caleb, criador do Alpinejs e Livewire, chama esses componentes de “assassinos de blades”. Vue é uma ferramenta poderosa, mas o tempo gasto tratando eventos assíncronos, adicionando v-ifs, atualizando bibliotecas, atrasa o desenvolvimento e torna a experiência um pouco maçante. Parte do atraso mencionado se deve a falta de testes unitários, eu, particularmente, não conheço ninguém que utilize testes unitários com Vue e isso é bem problemático quando encontramos blades e blades como a exibida acima. Quanto mais se trabalha com Vue e Laravel mais sentimos a necessidade de escrever um código javascript melhor, aprender Vuex, utilizar testes unitários nele usando Jest ou outra lib. Vamos adicionando camadas e camadas de complexidade para algo que deveria ser simples: requisição e exibição de dados (o pior dos casos é quando regra de negócio entra em front-end, debugar um erro em um código assim é uma grande dor de cabeça). Caleb propõe uma solução voltada mais ao backend, intrínseca ao Laravel, o Livewire. É difícil definir a ferramenta, mas é como se escrevessemos código Laravel como componentes. A definição oficial é: ` Livewire is a full-stack framework for Laravel that makes building dynamic interfaces simple, without leaving the comfort of Laravel. `. O Livewire é ótimo para situações em que o nosso usuário interage com a tela e espera uma ação imediata, ele irá fazer uma requisição ajax e atualizar o front automaticamente (como se a página fosse reativa). Um exemplo, visto abaixo, retirado do artigo do Branick. O Livewire é uma ferramenta muito poderosa que permite reaproveitar código através dos componentes, além de facilitar e agilizar o desenvolvimento de interfaces ricas, sem ter que chamar bibliotecas JS externas, sem sair do arcabouço Laravel e podendo realizar testes unitários nos componentes. Entretanto todas essas facilidades tem um preço, que é o custo de renderizar novamente HTML toda vez que se faz uma requisição. O Livewire não é uma “bala de prata” e deve ser utilizado com cautela. Tailwind O Tailwind é um framework CSS com uma abordagem utility-first , o código CSS é abstraído no HTML como classes. Por exemplo, o código ` &amp;lt;div style=&quot;background-color:black; border-radius: 100%&quot;&amp;gt;&amp;lt;/div&amp;gt; ` no Tailwind ficaria ` &amp;lt;div class=&quot;bg-black round-full&quot;&amp;gt;&amp;lt;div&amp;gt; `. O primeiro contato com o framework é estranho porque o HTML se torna extenso de escrever, mas a medida que vamos utilizando vemos o quão ágil é utilizar o Tailwind. As páginas são escritas eficientemente, se inspeciona elemento, muda as classes, copia para o código e em minutos você tem algo funcional que levaria mais tempo para fazer utilizando Bootstrap. Esse esquema quase de prototipação de páginas é ótimo para fábricas de software. Uma vez que os desenvolvedores pegam o jeito como o framework se torna fácil pegar um design do Adobe XD e dar vida no HTML. AlpineJS O Alpinejs é um microframework JS, reativo, muito parecido com Vue (só que bem mais simples) que facilita manipulações do DOM. Por ter sido criado pela mesma pessoa, o Alpinejs funciona muito bem com integrações com o Livewire. Todos os gargalos de performance encontrados no Livewire eu consegui contornar utilizando o Alpine em conjunto. Um exemplo de utilização do Alpine em conjunto com o Tailwind pode ser visto abaixo. Note que o código HTML mantém a estilização e o JS embutido, é muito simples e rápido estilizar e modificar o DOM utilizando as duas ferramentas em conjunto. See the Pen Simple CRUD by (@) on CodePen. A curva de aprendizado do framework é muito baixa porque ele é bem pequeno, além de procurar se aproximar bastante da sintaxe do Vue (velho conhecido dos devs fullstack Laravel). Conclusão Estou trabalhando com a stack a cerca de três ou quatro meses, escrevendo uma nova versão de um sistema que antes era feito com Laravel e Vue. O design foi criado no Adobe XD e em questão de uma a duas semanas já tínhamos passado completamente pro Tailwind. A utilização do Livewire foi feita a medida da necessidade, em geral, situações que exigiria requisições ajax ou que apelariamos para o Vue, se tornaram componentes Livewire. A impressão é que o novo sistema de componentes blade do Laravel 6 e as novas funcionalidades do Laravel 7 também colaboraram muito para essa nova forma de escrever sistemas, tornando natural codar no Laravel componentizado e associar o Livewire nas blades. No começo do projeto eu não conhecia Livewire, Alpinejs e nem o Tailwind, mas é muito bom sair do conforto com esses três. Como o Tailwind é mais “baixo nível” que o Bootstrap eu acabei aprendendo flexbox e vários outros detalhes de CSS que eu desconhecia. O mesmo aconteceu com o Alpinejs, por ser pequeno boa parte do código feito com ele é JS puro. O Tall potencializa as tecnologias básicas que usamos no dia a dia (JS, CSS, PHP) tornando o desenvolvimento bem mais divertido e sem necessidade de adicionar bibliotecas terceiras que acabam complicando a manutenção posterior do sistema. Além disso, o que mais curto na stack, é que se aproveita ao máximo o uso do Laravel.</summary></entry></feed>